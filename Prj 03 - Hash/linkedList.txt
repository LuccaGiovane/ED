#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>

#define TAMANHO_HASH 20
#define FATOR_MULT 0.6180339887

struct tabelaHash
{
    struct listaEncadeada
    {
        int chave;
        struct listaEncadeada* proximo;
    }* tabela[TAMANHO_HASH];
};

int hash(int chave)
{
    // Aqui é feito o cálculo do índice de hash usando o método da multiplicação
    double valorHash = (double)chave * FATOR_MULT;
    double parteFracionaria = valorHash - floor(valorHash);
    return (int)(TAMANHO_HASH * parteFracionaria);
}

void inicializaTabelaHash(struct tabelaHash* ht)
{
    // Inicialização da tabela hash com todas as entradas nulas
    for (int i = 0; i < TAMANHO_HASH; i++)
    {
        ht->tabela[i] = NULL;
    }
}

void insereElemento(struct tabelaHash* ht, int chave)
{
    int index = hash(chave);
    struct listaEncadeada* novoElemento = (struct listaEncadeada*)malloc(sizeof(struct listaEncadeada));

    // Alocação de memória para o novo elemento da lista encadeada
    novoElemento->chave = chave;
    novoElemento->proximo = NULL;

    if (ht->tabela[index] == NULL)
    {
        // Se a posição na tabela estiver vazia, o novo elemento é simplesmente adicionado
        ht->tabela[index] = novoElemento;
    }
    else
    {
        // Tratamento de colisão: Adiciona o novo elemento no início da lista
        printf("Colisao detectada!\n");
        printf("Efetuando tratamento . . .\n");
        sleep(1);
        novoElemento->proximo = ht->tabela[index];
        ht->tabela[index] = novoElemento;
    }
}

void deletaElemento(struct tabelaHash* ht, int chave)
{
    int index = hash(chave);
    struct listaEncadeada* atual = ht->tabela[index];
    struct listaEncadeada* anterior = NULL;

    while (atual != NULL)
    {
        if (atual->chave == chave)
        {
            if (anterior == NULL)
            {
                // O elemento a ser excluído é o primeiro da lista
                ht->tabela[index] = atual->proximo;
            }
            else
            {
                anterior->proximo = atual->proximo;
            }
            free(atual);
            return; // Elemento encontrado e removido
        }
        anterior = atual;
        atual = atual->proximo;
    }
    // Elemento não encontrado
    printf("Valor nao encontrado! :(\n");
}

void mostraTabela(struct tabelaHash* ht)
{
    for (int i = 0; i < TAMANHO_HASH; i++)
    {
        printf("\n----- POSICAO [%d] -----\n", i);

        struct listaEncadeada* atual = ht->tabela[i];

        while (atual != NULL)
        {
            printf("| %d |\n", atual->chave);
            atual = atual->proximo;
        }

        printf("----------------------\n");
    }
}

int main()
{
    struct tabelaHash ht;
    inicializaTabelaHash(&ht);

    int opcao = 99, quantidadeInsercao, valorInsercao, elementoDelecao;

    printf("\n\n========== TABELA HASH ==========\n\n");
    while (opcao != 0)
    {
        printf("\nEscolha uma opcao:\n"
               "[1] Inserir dados\n"
               "[2] Deletar um valor\n"
               "[3] Mostrar tabela\n"
               "[0] Sair\n"
               "Opcao:");
        scanf("%d", &opcao);

        switch (opcao)
        {
            case 0:
                printf("\n\t\tSaindo . . .\n");
                sleep(1);
                printf("\n\n========== TABELA HASH ==========\n\n");
                break;

            case 1:
                printf("\n===== INSERIR ELEMENTOS =====\n\n");

                printf("Insira a quantidade de elementos para a insercao: ");
                scanf("%d", &quantidadeInsercao);

                for (int i = 1; i <= quantidadeInsercao; i++)
                {
                    printf("\nValor[%d/%d]", i, quantidadeInsercao);
                    scanf("%d", &valorInsercao);

                    insereElemento(&ht, valorInsercao);
                }

                break;

            case 2:
                printf("\n===== DELETAR ELEMENTO =====\n\n");

                printf("Insira o elemento a ser deletado:");
                scanf("%d", &elementoDelecao);

                deletaElemento(&ht, elementoDelecao);

                break;

            case 3:
                printf("\n===== MOSTRAR TABELA =====\n\n");
                mostraTabela(&ht);
                printf("\n==============================\n\n");
                break;

            default:
                printf("\nOpcao Invalida! \n");
                break;
        }
    }

    return 0;
}
